# ------------------------
# Construction du tableau (robuste)
# ------------------------
rows = []
missing_opportunities = []

for item_type, prop in sorted(all_keys):
    row = {
        "Type": item_type,
        "Propri√©t√©": prop,
        "Votre site": "‚úÖ" if (item_type, prop) in client_schema else "‚ùå"
    }
    at_least_one_has_it = False

    for i, schema in enumerate(competitor_schemas):
        has_it = "‚úÖ" if (item_type, prop) in schema else "‚ùå"
        if has_it == "‚úÖ":
            at_least_one_has_it = True
        # S√©curise l'acc√®s au nom (si aucun concurrent saisi)
        name = competitor_names[i] if i < len(competitor_names) else f"Concurrent {i+1}"
        row[name] = has_it

    if row["Votre site"] == "‚ùå" and at_least_one_has_it:
        missing_opportunities.append((item_type, prop))

    rows.append(row)

# on force les colonnes attendues (m√™me si rows est vide)
expected_cols = ["Type", "Propri√©t√©", "Votre site"] + competitor_names
df = pd.DataFrame(rows)
for c in expected_cols:
    if c not in df.columns:
        df[c] = []

# ------------------------
# üìä TABLEAU COMPARATIF PAR TYPE (s√©curis√©)
# ------------------------
st.subheader("üß© Donn√©es compar√©es par type")

if df.empty or "Type" not in df.columns:
    st.info("Aucune donn√©e structur√©e JSON-LD d√©tect√©e pour ces URLs. "
            "Essaie avec une **fiche produit** ou colle le **HTML** en fallback.")
else:
    # on ordonne les colonnes pour l'affichage
    df = df[expected_cols]

    grouped = df.groupby("Type", dropna=False)

    def colorize(val):
        return "color: green" if val == "‚úÖ" else "color: r
